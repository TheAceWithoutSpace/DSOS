{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('../GetIntrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $SyntaxError = GetIntrinsic('%SyntaxError%');\n\nvar has = require('has');\n\nvar predicates = {\n  // https://ecma-international.org/ecma-262/6.0/#sec-property-descriptor-specification-type\n  'Property Descriptor': function isPropertyDescriptor(Type, Desc) {\n    if (Type(Desc) !== 'Object') {\n      return false;\n    }\n\n    var allowed = {\n      '[[Configurable]]': true,\n      '[[Enumerable]]': true,\n      '[[Get]]': true,\n      '[[Set]]': true,\n      '[[Value]]': true,\n      '[[Writable]]': true\n    };\n\n    for (var key in Desc) {\n      // eslint-disable-line\n      if (has(Desc, key) && !allowed[key]) {\n        return false;\n      }\n    }\n\n    var isData = has(Desc, '[[Value]]');\n    var IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');\n\n    if (isData && IsAccessor) {\n      throw new $TypeError('Property Descriptors may not be both accessor and data descriptors');\n    }\n\n    return true;\n  }\n};\n\nmodule.exports = function assertRecord(Type, recordType, argumentName, value) {\n  var predicate = predicates[recordType];\n\n  if (typeof predicate !== 'function') {\n    throw new $SyntaxError('unknown record type: ' + recordType);\n  }\n\n  if (!predicate(Type, value)) {\n    throw new $TypeError(argumentName + ' must be a ' + recordType);\n  }\n};","map":{"version":3,"sources":["C:/Users/ben78/Desktop/Dsos/DSOS/Frontend/dsos/node_modules/array.prototype.flat/node_modules/es-abstract/helpers/assertRecord.js"],"names":["GetIntrinsic","require","$TypeError","$SyntaxError","has","predicates","isPropertyDescriptor","Type","Desc","allowed","key","isData","IsAccessor","module","exports","assertRecord","recordType","argumentName","value","predicate"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,iBAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAD,CAA7B;AACA,IAAIG,YAAY,GAAGH,YAAY,CAAC,eAAD,CAA/B;;AAEA,IAAII,GAAG,GAAGH,OAAO,CAAC,KAAD,CAAjB;;AAEA,IAAII,UAAU,GAAG;AAChB;AACA,yBAAuB,SAASC,oBAAT,CAA8BC,IAA9B,EAAoCC,IAApC,EAA0C;AAChE,QAAID,IAAI,CAACC,IAAD,CAAJ,KAAe,QAAnB,EAA6B;AAC5B,aAAO,KAAP;AACA;;AACD,QAAIC,OAAO,GAAG;AACb,0BAAoB,IADP;AAEb,wBAAkB,IAFL;AAGb,iBAAW,IAHE;AAIb,iBAAW,IAJE;AAKb,mBAAa,IALA;AAMb,sBAAgB;AANH,KAAd;;AASA,SAAK,IAAIC,GAAT,IAAgBF,IAAhB,EAAsB;AAAE;AACvB,UAAIJ,GAAG,CAACI,IAAD,EAAOE,GAAP,CAAH,IAAkB,CAACD,OAAO,CAACC,GAAD,CAA9B,EAAqC;AACpC,eAAO,KAAP;AACA;AACD;;AAED,QAAIC,MAAM,GAAGP,GAAG,CAACI,IAAD,EAAO,WAAP,CAAhB;AACA,QAAII,UAAU,GAAGR,GAAG,CAACI,IAAD,EAAO,SAAP,CAAH,IAAwBJ,GAAG,CAACI,IAAD,EAAO,SAAP,CAA5C;;AACA,QAAIG,MAAM,IAAIC,UAAd,EAA0B;AACzB,YAAM,IAAIV,UAAJ,CAAe,oEAAf,CAAN;AACA;;AACD,WAAO,IAAP;AACA;AA3Be,CAAjB;;AA8BAW,MAAM,CAACC,OAAP,GAAiB,SAASC,YAAT,CAAsBR,IAAtB,EAA4BS,UAA5B,EAAwCC,YAAxC,EAAsDC,KAAtD,EAA6D;AAC7E,MAAIC,SAAS,GAAGd,UAAU,CAACW,UAAD,CAA1B;;AACA,MAAI,OAAOG,SAAP,KAAqB,UAAzB,EAAqC;AACpC,UAAM,IAAIhB,YAAJ,CAAiB,0BAA0Ba,UAA3C,CAAN;AACA;;AACD,MAAI,CAACG,SAAS,CAACZ,IAAD,EAAOW,KAAP,CAAd,EAA6B;AAC5B,UAAM,IAAIhB,UAAJ,CAAee,YAAY,GAAG,aAAf,GAA+BD,UAA9C,CAAN;AACA;AACD,CARD","sourcesContent":["'use strict';\r\n\r\nvar GetIntrinsic = require('../GetIntrinsic');\r\n\r\nvar $TypeError = GetIntrinsic('%TypeError%');\r\nvar $SyntaxError = GetIntrinsic('%SyntaxError%');\r\n\r\nvar has = require('has');\r\n\r\nvar predicates = {\r\n\t// https://ecma-international.org/ecma-262/6.0/#sec-property-descriptor-specification-type\r\n\t'Property Descriptor': function isPropertyDescriptor(Type, Desc) {\r\n\t\tif (Type(Desc) !== 'Object') {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tvar allowed = {\r\n\t\t\t'[[Configurable]]': true,\r\n\t\t\t'[[Enumerable]]': true,\r\n\t\t\t'[[Get]]': true,\r\n\t\t\t'[[Set]]': true,\r\n\t\t\t'[[Value]]': true,\r\n\t\t\t'[[Writable]]': true\r\n\t\t};\r\n\r\n\t\tfor (var key in Desc) { // eslint-disable-line\r\n\t\t\tif (has(Desc, key) && !allowed[key]) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar isData = has(Desc, '[[Value]]');\r\n\t\tvar IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');\r\n\t\tif (isData && IsAccessor) {\r\n\t\t\tthrow new $TypeError('Property Descriptors may not be both accessor and data descriptors');\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n};\r\n\r\nmodule.exports = function assertRecord(Type, recordType, argumentName, value) {\r\n\tvar predicate = predicates[recordType];\r\n\tif (typeof predicate !== 'function') {\r\n\t\tthrow new $SyntaxError('unknown record type: ' + recordType);\r\n\t}\r\n\tif (!predicate(Type, value)) {\r\n\t\tthrow new $TypeError(argumentName + ' must be a ' + recordType);\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"script"}
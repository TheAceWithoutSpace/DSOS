{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('../GetIntrinsic.js');\n\nvar $construct = GetIntrinsic('%Reflect.construct%', true);\n\nvar DefinePropertyOrThrow = require('./DefinePropertyOrThrow');\n\ntry {\n  DefinePropertyOrThrow({}, '', {\n    '[[Get]]': function () {}\n  });\n} catch (e) {\n  // Accessor properties aren't supported\n  DefinePropertyOrThrow = null;\n} // https://www.ecma-international.org/ecma-262/6.0/#sec-isconstructor\n\n\nif (DefinePropertyOrThrow && $construct) {\n  var isConstructorMarker = {};\n  var badArrayLike = {};\n  DefinePropertyOrThrow(badArrayLike, 'length', {\n    '[[Get]]': function () {\n      throw isConstructorMarker;\n    },\n    '[[Enumerable]]': true\n  });\n\n  module.exports = function IsConstructor(argument) {\n    try {\n      // `Reflect.construct` invokes `IsConstructor(target)` before `Get(args, 'length')`:\n      $construct(argument, badArrayLike);\n    } catch (err) {\n      return err === isConstructorMarker;\n    }\n  };\n} else {\n  module.exports = function IsConstructor(argument) {\n    // unfortunately there's no way to truly check this without try/catch `new argument` in old environments\n    return typeof argument === 'function' && !!argument.prototype;\n  };\n}","map":{"version":3,"sources":["C:/Users/ben78/Desktop/ספר פרוקייט/DSOS/Frontend/dsos/node_modules/array.prototype.flat/node_modules/es-abstract/2019/IsConstructor.js"],"names":["GetIntrinsic","require","$construct","DefinePropertyOrThrow","e","isConstructorMarker","badArrayLike","module","exports","IsConstructor","argument","err","prototype"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,oBAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGF,YAAY,CAAC,qBAAD,EAAwB,IAAxB,CAA7B;;AAEA,IAAIG,qBAAqB,GAAGF,OAAO,CAAC,yBAAD,CAAnC;;AACA,IAAI;AACHE,EAAAA,qBAAqB,CAAC,EAAD,EAAK,EAAL,EAAS;AAAE,eAAW,YAAY,CAAE;AAA3B,GAAT,CAArB;AACA,CAFD,CAEE,OAAOC,CAAP,EAAU;AACX;AACAD,EAAAA,qBAAqB,GAAG,IAAxB;AACA,C,CAED;;;AAEA,IAAIA,qBAAqB,IAAID,UAA7B,EAAyC;AACxC,MAAIG,mBAAmB,GAAG,EAA1B;AACA,MAAIC,YAAY,GAAG,EAAnB;AACAH,EAAAA,qBAAqB,CAACG,YAAD,EAAe,QAAf,EAAyB;AAC7C,eAAW,YAAY;AACtB,YAAMD,mBAAN;AACA,KAH4C;AAI7C,sBAAkB;AAJ2B,GAAzB,CAArB;;AAOAE,EAAAA,MAAM,CAACC,OAAP,GAAiB,SAASC,aAAT,CAAuBC,QAAvB,EAAiC;AACjD,QAAI;AACH;AACAR,MAAAA,UAAU,CAACQ,QAAD,EAAWJ,YAAX,CAAV;AACA,KAHD,CAGE,OAAOK,GAAP,EAAY;AACb,aAAOA,GAAG,KAAKN,mBAAf;AACA;AACD,GAPD;AAQA,CAlBD,MAkBO;AACNE,EAAAA,MAAM,CAACC,OAAP,GAAiB,SAASC,aAAT,CAAuBC,QAAvB,EAAiC;AACjD;AACA,WAAO,OAAOA,QAAP,KAAoB,UAApB,IAAkC,CAAC,CAACA,QAAQ,CAACE,SAApD;AACA,GAHD;AAIA","sourcesContent":["'use strict';\r\n\r\nvar GetIntrinsic = require('../GetIntrinsic.js');\r\n\r\nvar $construct = GetIntrinsic('%Reflect.construct%', true);\r\n\r\nvar DefinePropertyOrThrow = require('./DefinePropertyOrThrow');\r\ntry {\r\n\tDefinePropertyOrThrow({}, '', { '[[Get]]': function () {} });\r\n} catch (e) {\r\n\t// Accessor properties aren't supported\r\n\tDefinePropertyOrThrow = null;\r\n}\r\n\r\n// https://www.ecma-international.org/ecma-262/6.0/#sec-isconstructor\r\n\r\nif (DefinePropertyOrThrow && $construct) {\r\n\tvar isConstructorMarker = {};\r\n\tvar badArrayLike = {};\r\n\tDefinePropertyOrThrow(badArrayLike, 'length', {\r\n\t\t'[[Get]]': function () {\r\n\t\t\tthrow isConstructorMarker;\r\n\t\t},\r\n\t\t'[[Enumerable]]': true\r\n\t});\r\n\r\n\tmodule.exports = function IsConstructor(argument) {\r\n\t\ttry {\r\n\t\t\t// `Reflect.construct` invokes `IsConstructor(target)` before `Get(args, 'length')`:\r\n\t\t\t$construct(argument, badArrayLike);\r\n\t\t} catch (err) {\r\n\t\t\treturn err === isConstructorMarker;\r\n\t\t}\r\n\t};\r\n} else {\r\n\tmodule.exports = function IsConstructor(argument) {\r\n\t\t// unfortunately there's no way to truly check this without try/catch `new argument` in old environments\r\n\t\treturn typeof argument === 'function' && !!argument.prototype;\r\n\t};\r\n}\r\n"]},"metadata":{},"sourceType":"script"}
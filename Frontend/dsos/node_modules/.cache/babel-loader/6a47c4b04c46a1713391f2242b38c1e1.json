{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ben78\\\\Desktop\\\\DSOS\\\\Frontend\\\\dsos\\\\src\\\\components\\\\GrowCalc.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { withRouter } from 'react-router-dom';\nimport Chart from '../components/chart.component';\n\nclass GrowCalc extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      LastData: [],\n      CurrentData: [],\n      PredictedData: []\n    };\n  }\n\n  async getData() {\n    let ts = Date.now();\n    let date_ob = new Date(ts);\n    let month = date_ob.getMonth() + 1;\n    let year = date_ob.getFullYear();\n    let LastData = [];\n    let CurrentData = [];\n    await axios.get(`http://localhost:3000/MonthDateRoute/Month/${month - 1}.${year}`).then(res => {\n      // console.log(res.data)\n      LastData = res.data;\n    });\n    await axios.get(`http://localhost:3000/MonthDateRoute/Month/${month}.${year}`).then(res => {\n      // console.log(res.data)\n      CurrentData = res.data;\n    });\n    console.log(LastData);\n    console.log(CurrentData);\n    this.setState({\n      LastData: LastData,\n      CurrentData: CurrentData\n    }); //get last year currecnt month data\n    //and this year month data\n\n    this.CompareData();\n  }\n\n  calcGrowth(Mt, M0) {\n    console.log(Mt + '||' + M0);\n\n    if (Mt === M0) {\n      return 1;\n    } else if (Mt === 0 && M0 !== 0) {\n      return 0;\n    } else if (Mt !== 0 && M0 === 0) {\n      return M0 / Mt + 1;\n    } else {\n      return Mt / M0 + 1;\n    } // let q = M0/Mt;\n    // Math.pow(q,t)\n\n  }\n\n  CompareData() {\n    let CurrntData = this.state.CurrentData;\n    let LastData = this.state.LastData;\n    let PredictedData = [];\n\n    if (this.state.LastData.length !== 0 && this.state.CurrentData.length !== 0) {\n      console.log(\"letsBegin\");\n\n      if (this.state.LastData.length >= this.state.CurrentData.length) {\n        this.state.CurrentData.forEach((CurrentData, index) => {\n          PredictedData.push({\n            AggreStorageTotal: CurrentData.AggreStorageTotal * this.calcGrowth(CurrentData.AggreStorageTotal, LastData[index].AggreStorageTotal),\n            Date: CurrntData[index].Date,\n            AggreStorageUsegeAmmount: CurrentData.AggreStorageUsegeAmmount * this.calcGrowth(CurrentData.AggreStorageUsegeAmmount, LastData[index].AggreStorageUsegeAmmount),\n            StorageRequests: CurrentData.StorageRequests * this.calcGrowth(CurrentData.StorageRequests, LastData[index].StorageRequests),\n            bugReports: CurrentData.bugReports * this.calcGrowth(CurrentData.bugReports, LastData[index].bugReports),\n            Users: CurrentData.users * this.calcGrowth(CurrentData.users, LastData[index].users)\n          });\n        });\n      } else {\n        this.state.LastData.forEach((LastData, index) => {\n          console.log(CurrntData[index]);\n          PredictedData.push({\n            AggreStorageTotal: CurrntData[index].AggreStorageTotal * this.calcGrowth(CurrntData[index].AggreStorageTotal, LastData.AggreStorageTotal),\n            Date: CurrntData[index].Date,\n            AggreStorageUsegeAmmount: CurrntData[index].AggreStorageUsegeAmmount * this.calcGrowth(CurrntData[index].AggreStorageUsegeAmmount, LastData.AggreStorageUsegeAmmount),\n            StorageRequests: CurrntData[index].StorageRequests * this.calcGrowth(CurrntData[index].StorageRequests, LastData.StorageRequests),\n            bugReports: CurrntData[index].bugReports * this.calcGrowth(CurrntData[index].bugReports, LastData.bugReports),\n            Users: CurrntData[index].users * this.calcGrowth(CurrntData[index].users, LastData.users)\n          });\n        });\n      }\n\n      console.log(PredictedData);\n      this.setState({\n        PredictedData: PredictedData\n      });\n    } else {\n      console.log('Error');\n    }\n  }\n\n  SetData() {\n    if (this.state.PredictedData) {\n      let CurrntData = this.state.CurrentData;\n      let StorageRequests = [];\n      let PredictedStorageRequests = [];\n      let bugReports = [];\n      let users = [];\n      let aggre = [];\n      let labels = [];\n      let FirestDay = false;\n      this.state.PredictedData.forEach((Data, index) => {\n        if (new Date(Data.Date).getUTCDay() !== 0) {\n          let DataLabel = parseInt(Data.Date[8] + Data.Date[9]) + 1;\n\n          if (FirestDay === false) {\n            FirestDay = true;\n            labels.push(1);\n          } else {\n            labels.push(DataLabel);\n          }\n\n          if (Data.StorageRequests === 0) {\n            PredictedStorageRequests.push(0);\n          } else {\n            PredictedStorageRequests.push(Data.StorageRequests);\n          }\n\n          if (CurrntData[index].StorageRequests === 0) {\n            StorageRequests.push(0);\n          } else {\n            StorageRequests.push(CurrntData[index].StorageRequests);\n          } // if(Data.bugReports===0){\n          //     bugReports.push(0);\n          // }else{\n          //     bugReports.push(parseInt((Data.bugReports/this.state.Bugs)*100));\n          // }\n          // if(Data.users===0){\n          //     users.push(0);\n          // }else{\n          //     users.push(parseInt((Data.users/this.state.Users)*100));\n          // }\n          // if(Data.AggreStorageUsegeAmmount===0||Data.AggreStorageTotal===0){\n          //     aggre.push(0)\n          // }else{\n          //     aggre.push(parseInt((Data.AggreStorageUsegeAmmount/Data.AggreStorageTotal)*100));\n          // }\n\n        }\n      });\n      return {\n        chartData: {\n          labels: labels,\n          datasets: [{\n            label: \"Users\",\n            fill: false,\n            backgroundColor: [\"rgba(255, 99, 132, 0.2)\"],\n            borderColor: ['rgba(255, 99, 132, 0.2)'],\n            data: users\n          }, {\n            label: \"Bugs\",\n            fill: false,\n            backgroundColor: [\"rgba(50, 120, 132, 0.6)\"],\n            borderColor: ['rgba(50, 120, 132, 0.6)'],\n            data: PredictedStorageRequests\n          }, {\n            label: \"StorageRequests\",\n            fill: false,\n            backgroundColor: [\"rgba(120, 99, 182, 0.6)\"],\n            borderColor: ['rgba(120, 99, 182, 0.6)'],\n            data: StorageRequests\n          }, {\n            label: \"Aggregate\",\n            fill: false,\n            backgroundColor: [\"rgba(170, 0, 65, 0.6)\"],\n            borderColor: ['rgba(170, 0, 65, 0.6)'],\n            data: aggre\n          }]\n        }\n      };\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, \"Loading ...\");\n    }\n  }\n\n  SetDatabugReports() {\n    if (this.state.PredictedData) {\n      let CurrntData = this.state.CurrentData;\n      let bugReports = [];\n      let PredictedbugReports = [];\n      let labels = [];\n      let FirestDay = false;\n      this.state.PredictedData.forEach((Data, index) => {\n        if (new Date(Data.Date).getUTCDay() !== 0) {\n          let DataLabel = parseInt(Data.Date[8] + Data.Date[9]) + 1;\n\n          if (FirestDay === false) {\n            FirestDay = true;\n            labels.push(1);\n          } else {\n            labels.push(DataLabel);\n          }\n\n          if (Data.bugReports === 0) {\n            PredictedbugReports.push(0);\n          } else {\n            PredictedbugReports.push(Data.bugReports);\n          }\n\n          if (CurrntData[index].bugReports === 0) {\n            bugReports.push(0);\n          } else {\n            bugReports.push(CurrntData[index].bugReports);\n          }\n        }\n      });\n      return {\n        chartData: {\n          labels: labels,\n          datasets: [{\n            label: \"PredictedStorageRequests\",\n            fill: false,\n            backgroundColor: [\"rgba(50, 120, 132, 0.6)\"],\n            borderColor: ['rgba(50, 120, 132, 0.6)'],\n            data: PredictedbugReports\n          }, {\n            label: \"StorageRequests\",\n            fill: false,\n            backgroundColor: [\"rgba(120, 99, 182, 0.6)\"],\n            borderColor: ['rgba(120, 99, 182, 0.6)'],\n            data: bugReports\n          }]\n        }\n      };\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, \"Loading ...\");\n    }\n  }\n\n  SetDataStorageReq() {\n    if (this.state.PredictedData) {\n      let CurrntData = this.state.CurrentData;\n      let StorageRequests = [];\n      let PredictedStorageRequests = [];\n      let labels = [];\n      let FirestDay = false;\n      this.state.PredictedData.forEach((Data, index) => {\n        if (new Date(Data.Date).getUTCDay() !== 0) {\n          let DataLabel = parseInt(Data.Date[8] + Data.Date[9]) + 1;\n\n          if (FirestDay === false) {\n            FirestDay = true;\n            labels.push(1);\n          } else {\n            labels.push(DataLabel);\n          }\n\n          if (Data.StorageRequests === 0) {\n            PredictedStorageRequests.push(0);\n          } else {\n            PredictedStorageRequests.push(Data.StorageRequests);\n          }\n\n          if (CurrntData[index].StorageRequests === 0) {\n            StorageRequests.push(0);\n          } else {\n            StorageRequests.push(CurrntData[index].StorageRequests);\n          }\n        }\n      });\n      return {\n        chartData: {\n          labels: labels,\n          datasets: [{\n            label: \"PredictedStorageRequests\",\n            fill: false,\n            backgroundColor: [\"rgba(50, 120, 132, 0.6)\"],\n            borderColor: ['rgba(50, 120, 132, 0.6)'],\n            data: PredictedStorageRequests\n          }, {\n            label: \"StorageRequests\",\n            fill: false,\n            backgroundColor: [\"rgba(120, 99, 182, 0.6)\"],\n            borderColor: ['rgba(120, 99, 182, 0.6)'],\n            data: StorageRequests\n          }]\n        }\n      };\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, \"Loading ...\");\n    }\n  }\n\n  SetDataUsers() {\n    if (this.state.PredictedData) {\n      let CurrntData = this.state.CurrentData;\n      let Users = [];\n      let PredictedUsers = [];\n      let labels = [];\n      let FirestDay = false;\n      this.state.PredictedData.forEach((Data, index) => {\n        if (new Date(Data.Date).getUTCDay() !== 0) {\n          let DataLabel = parseInt(Data.Date[8] + Data.Date[9]) + 1;\n\n          if (FirestDay === false) {\n            FirestDay = true;\n            labels.push(1);\n          } else {\n            labels.push(DataLabel);\n          }\n\n          if (Data.Users === 0) {\n            PredictedUsers.push(0);\n          } else {\n            PredictedUsers.push(Data.Users);\n          }\n\n          if (CurrntData[index].Users === 0) {\n            Users.push(0);\n          } else {\n            Users.push(CurrntData[index].Users);\n          }\n        }\n      });\n      return {\n        chartData: {\n          labels: labels,\n          datasets: [{\n            label: \"PredictedStorageRequests\",\n            fill: false,\n            backgroundColor: [\"rgba(50, 120, 132, 0.6)\"],\n            borderColor: ['rgba(50, 120, 132, 0.6)'],\n            data: PredictedUsers\n          }, {\n            label: \"StorageRequests\",\n            fill: false,\n            backgroundColor: [\"rgba(120, 99, 182, 0.6)\"],\n            borderColor: ['rgba(120, 99, 182, 0.6)'],\n            data: Users\n          }]\n        }\n      };\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, \"Loading ...\");\n    }\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, \"Hello\", /*#__PURE__*/React.createElement(Chart, {\n      type: \"line\",\n      title: 'this.state.chartTitle',\n      chartData: this.SetDataUsers(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default withRouter(GrowCalc);","map":{"version":3,"sources":["C:/Users/ben78/Desktop/DSOS/Frontend/dsos/src/components/GrowCalc.js"],"names":["React","Component","axios","withRouter","Chart","GrowCalc","constructor","props","state","LastData","CurrentData","PredictedData","getData","ts","Date","now","date_ob","month","getMonth","year","getFullYear","get","then","res","data","console","log","setState","CompareData","calcGrowth","Mt","M0","CurrntData","length","forEach","index","push","AggreStorageTotal","AggreStorageUsegeAmmount","StorageRequests","bugReports","Users","users","SetData","PredictedStorageRequests","aggre","labels","FirestDay","Data","getUTCDay","DataLabel","parseInt","chartData","datasets","label","fill","backgroundColor","borderColor","SetDatabugReports","PredictedbugReports","SetDataStorageReq","SetDataUsers","PredictedUsers","componentDidMount","render"],"mappings":"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","sourcesContent":["import React,{Component}from 'react';\r\nimport axios from 'axios';\r\nimport {withRouter}from 'react-router-dom'\r\nimport Chart from '../components/chart.component';\r\nclass GrowCalc extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            LastData:[],\r\n            CurrentData:[],\r\n            PredictedData:[],\r\n        }\r\n    }\r\n    async getData(){\r\n        let ts=Date.now()\r\n        let date_ob = new Date(ts);\r\n        let month = date_ob.getMonth() + 1;\r\n        let year = date_ob.getFullYear();\r\n        let LastData=[];\r\n        let CurrentData=[];\r\n        await axios.get(`http://localhost:3000/MonthDateRoute/Month/${month-1}.${year}`)\r\n            .then((res)=>{\r\n            // console.log(res.data)\r\n            LastData=res.data;\r\n        })\r\n        await axios.get(`http://localhost:3000/MonthDateRoute/Month/${month}.${year}`)\r\n            .then((res)=>{\r\n                    // console.log(res.data)\r\n                    CurrentData=res.data;\r\n                })\r\n        console.log(LastData);\r\n        console.log(CurrentData);\r\n        this.setState({\r\n            LastData:LastData,\r\n            CurrentData:CurrentData})\r\n        //get last year currecnt month data\r\n        //and this year month data\r\n        this.CompareData();\r\n    }\r\n    calcGrowth(Mt,M0){\r\n        console.log(Mt+'||'+M0);\r\n        if(Mt===M0)\r\n        {\r\n            return(1);\r\n        }else if(Mt===0&&M0!==0)\r\n        {\r\n            return(0);\r\n        }else if(Mt!==0&&M0===0){\r\n            return((M0/Mt)+1)\r\n        }else{\r\n            return((Mt/M0)+1)\r\n        }\r\n        // let q = M0/Mt;\r\n        // Math.pow(q,t)\r\n\r\n    }\r\n    CompareData(){\r\n        let CurrntData=this.state.CurrentData;\r\n        let LastData=this.state.LastData;\r\n        let PredictedData=[];\r\n        if(this.state.LastData.length!==0&&this.state.CurrentData.length!==0)\r\n        {\r\n            console.log(\"letsBegin\")\r\n            if(this.state.LastData.length>=this.state.CurrentData.length)\r\n            {\r\n                this.state.CurrentData.forEach((CurrentData,index)=>{\r\n                    PredictedData.push({\r\n                        AggreStorageTotal:CurrentData.AggreStorageTotal*this.calcGrowth(CurrentData.AggreStorageTotal,LastData[index].AggreStorageTotal),\r\n                        Date:CurrntData[index].Date,\r\n                        AggreStorageUsegeAmmount:CurrentData.AggreStorageUsegeAmmount*this.calcGrowth(CurrentData.AggreStorageUsegeAmmount,LastData[index].AggreStorageUsegeAmmount),\r\n                        StorageRequests:CurrentData.StorageRequests*this.calcGrowth(CurrentData.StorageRequests,LastData[index].StorageRequests),\r\n                        bugReports:CurrentData.bugReports*this.calcGrowth(CurrentData.bugReports,LastData[index].bugReports),\r\n                        Users:CurrentData.users*this.calcGrowth(CurrentData.users,LastData[index].users),\r\n                    })    \r\n                })\r\n            }else{\r\n                this.state.LastData.forEach((LastData,index)=>{\r\n                    console.log(CurrntData[index]);\r\n                    PredictedData.push({\r\n                        AggreStorageTotal:CurrntData[index].AggreStorageTotal*this.calcGrowth(CurrntData[index].AggreStorageTotal,LastData.AggreStorageTotal),\r\n                        Date:CurrntData[index].Date,\r\n                        AggreStorageUsegeAmmount:CurrntData[index].AggreStorageUsegeAmmount*this.calcGrowth(CurrntData[index].AggreStorageUsegeAmmount,LastData.AggreStorageUsegeAmmount),\r\n                        StorageRequests:CurrntData[index].StorageRequests*this.calcGrowth(CurrntData[index].StorageRequests,LastData.StorageRequests),\r\n                        bugReports:CurrntData[index].bugReports*this.calcGrowth(CurrntData[index].bugReports,LastData.bugReports),\r\n                        Users:CurrntData[index].users*this.calcGrowth(CurrntData[index].users,LastData.users),\r\n                    })   \r\n                })\r\n            }\r\n            console.log(PredictedData)\r\n            this.setState({PredictedData:PredictedData})\r\n        }else{\r\n            console.log('Error')\r\n        }\r\n\r\n    }\r\n\r\n    SetData(){\r\n        if(this.state.PredictedData) {\r\n            let CurrntData=this.state.CurrentData;\r\n            let StorageRequests=[];\r\n            let PredictedStorageRequests=[];\r\n            let bugReports=[];\r\n            let users=[];\r\n            let aggre=[];\r\n            let labels=[];\r\n            let FirestDay=false;\r\n            this.state.PredictedData.forEach((Data,index)=>{\r\n                if(new Date(Data.Date).getUTCDay()!==0)\r\n                {   \r\n                    let DataLabel=parseInt(Data.Date[8]+Data.Date[9])+1;\r\n                    if(FirestDay===false)\r\n                    {\r\n                        FirestDay=true;\r\n                        labels.push(1)\r\n                    }else{\r\n                    labels.push(DataLabel)\r\n                    }\r\n                    if(Data.StorageRequests===0){\r\n                        PredictedStorageRequests.push(0);\r\n                    }else{\r\n                        PredictedStorageRequests.push(Data.StorageRequests);\r\n                    }\r\n                    if(CurrntData[index].StorageRequests===0){\r\n                        StorageRequests.push(0);\r\n                    }else{StorageRequests.push(CurrntData[index].StorageRequests)}\r\n                    // if(Data.bugReports===0){\r\n                    //     bugReports.push(0);\r\n                    // }else{\r\n                    //     bugReports.push(parseInt((Data.bugReports/this.state.Bugs)*100));\r\n                    // }\r\n                    // if(Data.users===0){\r\n                    //     users.push(0);\r\n                    // }else{\r\n                    //     users.push(parseInt((Data.users/this.state.Users)*100));\r\n                    // }\r\n                    // if(Data.AggreStorageUsegeAmmount===0||Data.AggreStorageTotal===0){\r\n                    //     aggre.push(0)\r\n                    // }else{\r\n                    //     aggre.push(parseInt((Data.AggreStorageUsegeAmmount/Data.AggreStorageTotal)*100));\r\n                    // }\r\n                }\r\n            })\r\n        return({\r\n            chartData:{\r\n                labels:labels,\r\n                datasets:[{\r\n                 label:\"Users\",\r\n                 fill: false,\r\n                 backgroundColor:[\"rgba(255, 99, 132, 0.2)\"],\r\n                 borderColor: ['rgba(255, 99, 132, 0.2)',],\r\n                 data:users\r\n                },{\r\n                    label:\"Bugs\",\r\n                    fill: false,\r\n                    backgroundColor:[\"rgba(50, 120, 132, 0.6)\"],\r\n                    borderColor: ['rgba(50, 120, 132, 0.6)',],\r\n                    data:PredictedStorageRequests \r\n                }, {\r\n                    label:\"StorageRequests\",\r\n                    fill: false,\r\n                    backgroundColor:[\"rgba(120, 99, 182, 0.6)\"],\r\n                    borderColor: ['rgba(120, 99, 182, 0.6)',],\r\n                    data:StorageRequests \r\n                },{\r\n                    label:\"Aggregate\",\r\n                    fill: false,\r\n                    backgroundColor:[\"rgba(170, 0, 65, 0.6)\"],\r\n                    borderColor: ['rgba(170, 0, 65, 0.6)',],\r\n                    data:aggre \r\n                },\r\n                ]\r\n            }\r\n        })\r\n        }else{return<>Loading ...</>}       \r\n     }\r\n     SetDatabugReports(){\r\n        if(this.state.PredictedData) {\r\n            let CurrntData=this.state.CurrentData;\r\n            let bugReports=[];\r\n            let PredictedbugReports=[];\r\n            let labels=[];\r\n            let FirestDay=false;\r\n            this.state.PredictedData.forEach((Data,index)=>{\r\n                if(new Date(Data.Date).getUTCDay()!==0)\r\n                {   \r\n                    let DataLabel=parseInt(Data.Date[8]+Data.Date[9])+1;\r\n                    if(FirestDay===false)\r\n                    {\r\n                        FirestDay=true;\r\n                        labels.push(1)\r\n                    }else{\r\n                    labels.push(DataLabel)\r\n                    }\r\n                    if(Data.bugReports===0){\r\n                        PredictedbugReports.push(0);\r\n                    }else{\r\n                        PredictedbugReports.push(Data.bugReports);\r\n                    }\r\n                    if(CurrntData[index].bugReports===0){\r\n                        bugReports.push(0);\r\n                    }else{bugReports.push(CurrntData[index].bugReports)}\r\n                }\r\n            })\r\n        return({\r\n            chartData:{\r\n                labels:labels,\r\n                datasets:[{\r\n                    label:\"PredictedStorageRequests\",\r\n                    fill: false,\r\n                    backgroundColor:[\"rgba(50, 120, 132, 0.6)\"],\r\n                    borderColor: ['rgba(50, 120, 132, 0.6)',],\r\n                    data:PredictedbugReports\r\n                }, {\r\n                    label:\"StorageRequests\",\r\n                    fill: false,\r\n                    backgroundColor:[\"rgba(120, 99, 182, 0.6)\"],\r\n                    borderColor: ['rgba(120, 99, 182, 0.6)',],\r\n                    data:bugReports\r\n                }\r\n                ]\r\n            }\r\n        })\r\n        }else{return<>Loading ...</>}       \r\n     }\r\n     SetDataStorageReq(){\r\n        if(this.state.PredictedData) {\r\n            let CurrntData=this.state.CurrentData;\r\n            let StorageRequests=[];\r\n            let PredictedStorageRequests=[];\r\n            let labels=[];\r\n            let FirestDay=false;\r\n            this.state.PredictedData.forEach((Data,index)=>{\r\n                if(new Date(Data.Date).getUTCDay()!==0)\r\n                {   \r\n                    let DataLabel=parseInt(Data.Date[8]+Data.Date[9])+1;\r\n                    if(FirestDay===false)\r\n                    {\r\n                        FirestDay=true;\r\n                        labels.push(1)\r\n                    }else{\r\n                    labels.push(DataLabel)\r\n                    }\r\n                    if(Data.StorageRequests===0){\r\n                        PredictedStorageRequests.push(0);\r\n                    }else{\r\n                        PredictedStorageRequests.push(Data.StorageRequests);\r\n                    }\r\n                    if(CurrntData[index].StorageRequests===0){\r\n                        StorageRequests.push(0);\r\n                    }else{StorageRequests.push(CurrntData[index].StorageRequests)}\r\n                }\r\n            })\r\n        return({\r\n            chartData:{\r\n                labels:labels,\r\n                datasets:[{\r\n                    label:\"PredictedStorageRequests\",\r\n                    fill: false,\r\n                    backgroundColor:[\"rgba(50, 120, 132, 0.6)\"],\r\n                    borderColor: ['rgba(50, 120, 132, 0.6)',],\r\n                    data:PredictedStorageRequests \r\n                }, {\r\n                    label:\"StorageRequests\",\r\n                    fill: false,\r\n                    backgroundColor:[\"rgba(120, 99, 182, 0.6)\"],\r\n                    borderColor: ['rgba(120, 99, 182, 0.6)',],\r\n                    data:StorageRequests \r\n                }\r\n                ]\r\n            }\r\n        })\r\n        }else{return<>Loading ...</>}       \r\n     }\r\n     SetDataUsers(){\r\n        if(this.state.PredictedData) {\r\n            let CurrntData=this.state.CurrentData;\r\n            let Users=[];\r\n            let PredictedUsers=[];\r\n            let labels=[];\r\n            let FirestDay=false;\r\n            this.state.PredictedData.forEach((Data,index)=>{\r\n                if(new Date(Data.Date).getUTCDay()!==0)\r\n                {   \r\n                    let DataLabel=parseInt(Data.Date[8]+Data.Date[9])+1;\r\n                    if(FirestDay===false)\r\n                    {\r\n                        FirestDay=true;\r\n                        labels.push(1)\r\n                    }else{\r\n                    labels.push(DataLabel)\r\n                    }\r\n                    if(Data.Users===0){\r\n                        PredictedUsers.push(0);\r\n                    }else{\r\n                        PredictedUsers.push(Data.Users);\r\n                    }\r\n                    if(CurrntData[index].Users===0){\r\n                        Users.push(0);\r\n                    }else{Users.push(CurrntData[index].Users)}\r\n                }\r\n            })\r\n        return({\r\n            chartData:{\r\n                labels:labels,\r\n                datasets:[{\r\n                    label:\"PredictedStorageRequests\",\r\n                    fill: false,\r\n                    backgroundColor:[\"rgba(50, 120, 132, 0.6)\"],\r\n                    borderColor: ['rgba(50, 120, 132, 0.6)',],\r\n                    data:PredictedUsers\r\n                }, {\r\n                    label:\"StorageRequests\",\r\n                    fill: false,\r\n                    backgroundColor:[\"rgba(120, 99, 182, 0.6)\"],\r\n                    borderColor: ['rgba(120, 99, 182, 0.6)',],\r\n                    data:Users\r\n                }\r\n                ]\r\n            }\r\n        })\r\n        }else{return<>Loading ...</>}       \r\n     }\r\n    componentDidMount(){\r\n        this.getData();\r\n    }\r\n    render(){\r\n        return(\r\n            <>\r\n            Hello\r\n            <Chart type='line' title={'this.state.chartTitle'} chartData={this.SetDataUsers()}/>\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default withRouter(GrowCalc)"]},"metadata":{},"sourceType":"module"}
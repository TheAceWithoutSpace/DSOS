{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ben78\\\\Desktop\\\\Dsos\\\\DSOS\\\\Frontend\\\\dsos\\\\src\\\\components\\\\SystemGrafth.component.js\";\nimport React, { Component, Fragment } from 'react';\nimport axios from 'axios';\nimport Chart from './chart.component';\nexport default class SystemGrafth extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chartData: {\n        n: 0\n      },\n      Requests: [],\n      SVM: '',\n      Chartdata: '',\n      TotalAmmount: '',\n      message: '',\n      ChartTitle: 'loading'\n    };\n  }\n\n  async componentDidMount(nextProps) {\n    console.log(nextProps);\n    console.log(this.props);\n\n    if (this.props !== nextProps) {\n      let TotalAmount = 0;\n      let UsedAmount = 0;\n      let leftToAllocate = 0;\n      let Chartdata = [];\n      let SVMSArray = [];\n      let SvmsName = [];\n      let SvmsAmount = [];\n      let ChartTitle = ''; //get aggregate info by the aggregate name\n\n      await axios.get(`Aggregate/Aggre/${this.props.Aggre}`).then(res => {\n        console.log(res.data.res);\n\n        if (res.data.res[0]) {\n          TotalAmount = res.data.res[0].total;\n          UsedAmount = res.data.res[0].used;\n          ChartTitle = res.data.res[0].Name;\n          leftToAllocate = res.data.res[0].leftToAllocate;\n        }\n      }); //get all the svms by the aggreagate name\n\n      await axios.get(`SvmRoute/SvmByAggreName/${this.props.Aggre}`).then(res => {\n        console.log(res.data.res);\n        SVMSArray = res.data.res;\n      }); //calculate used vs free presentage\n\n      if (UsedAmount === 0) {\n        SvmsAmount.push(100);\n      } else {\n        SvmsAmount.push(leftToAllocate);\n      }\n\n      SvmsName.push('Free');\n      SVMSArray.forEach(SVM => {\n        console.log(SVM);\n\n        if (SVM.Amount !== 0) {\n          console.log(SVM.total + '||' + TotalAmount);\n          SvmsAmount.push(parseInt(SVM.total / TotalAmount * 10000) / 100);\n          SvmsName.push(SVM.Name);\n        }\n\n        console.log(SvmsAmount);\n      });\n      Chartdata.push({\n        chartData: {\n          labels: SvmsName,\n          datasets: [{\n            label: \"Requests\",\n            backgroundColor: [\"rgba(245, 73, 120, 0.65)\", \"rgba(175, 146, 234, 0.65)\", \"rgba(152, 244, 244, 0.56)\", \"rgba(152, 244, 152, 0.56)\", \"rgba(244, 152, 152, 0.56)\", \"rgba(244, 244, 152, 0.56)\", \"rgba(244, 152, 244, 0.56)\", \"rgba(152, 198, 244, 0.56)\"],\n            data: SvmsAmount\n          }]\n        }\n      });\n      console.log(Chartdata);\n      let message = ''; //create a masage by calculateing the used presentage\n\n      console.log(this.props.Amount);\n      console.log(UsedAmount);\n      console.log(TotalAmount);\n      let presentage = parseInt((this.props.Amount + UsedAmount) / TotalAmount * 100);\n\n      if (TotalAmount === null || UsedAmount === null || this.props.Amount === null) {\n        message = \"Server Errore cant get the data Please try again later\";\n      }\n\n      if (presentage < 100) {\n        message = `All Clear ${(presentage - 100) * -1}% Free left after`;\n      }\n\n      if (presentage >= 100 && presentage < 140) {\n        message = `OVER SUBSCRIBE if you accept ${presentage}% Black line %`;\n      }\n\n      if (presentage > 140) {\n        message = `Over SUBSCRIBE ${presentage}% Red line cant allocate this user Storage request`;\n      }\n\n      this.props.getMessage({\n        message,\n        presentage\n      });\n      this.setState({\n        Chartdata: Chartdata,\n        ChartTitle: ChartTitle\n      });\n    }\n  }\n\n  Charts() {\n    if (this.state.Chartdata) {\n      console.log(this.state.Chartdata[0].chartData);\n      return this.state.Chartdata.map((Chartdata, index) => {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"col-md-6\",\n          key: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 21\n          }\n        }, this.state.Chartdata[index] ? /*#__PURE__*/React.createElement(Chart, {\n          type: \"Pie\",\n          title: this.state.ChartTitle,\n          chartData: this.state.Chartdata[index],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 30\n          }\n        }) : /*#__PURE__*/React.createElement(\"alert\", {\n          className: \"alert alert-warning\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 26\n          }\n        }, \"Server Error Please try again later\"));\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex justify-content-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"spinner-border\",\n        role: \"status\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"sr-only\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }\n      }, \"Loading...\")));\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }\n    }, this.Charts());\n  }\n\n}","map":{"version":3,"sources":["C:/Users/ben78/Desktop/Dsos/DSOS/Frontend/dsos/src/components/SystemGrafth.component.js"],"names":["React","Component","Fragment","axios","Chart","SystemGrafth","constructor","props","state","chartData","n","Requests","SVM","Chartdata","TotalAmmount","message","ChartTitle","componentDidMount","nextProps","console","log","TotalAmount","UsedAmount","leftToAllocate","SVMSArray","SvmsName","SvmsAmount","get","Aggre","then","res","data","total","used","Name","push","forEach","Amount","parseInt","labels","datasets","label","backgroundColor","presentage","getMessage","setState","Charts","map","index","render"],"mappings":"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","sourcesContent":["import React,{Component, Fragment}from 'react';\r\nimport axios from 'axios';\r\nimport Chart from './chart.component';\r\n\r\nexport default class SystemGrafth extends Component{\r\n   constructor(props){\r\n       super(props);\r\n       this.state={\r\n        chartData:{n:0},\r\n        Requests:[],\r\n        SVM:'',\r\n        Chartdata:'',\r\n        TotalAmmount:'',\r\n        message:'',\r\n        ChartTitle:'loading',\r\n       }\r\n}\r\n\r\nasync componentDidMount(nextProps)\r\n{   \r\n    console.log(nextProps)\r\n    console.log(this.props)\r\n    if(this.props!==nextProps){\r\n    let TotalAmount=0;\r\n    let UsedAmount=0;\r\n    let leftToAllocate=0;\r\n    let Chartdata=[];\r\n    let SVMSArray=[];\r\n    let SvmsName=[];\r\n    let SvmsAmount=[];\r\n    let ChartTitle='';\r\n        //get aggregate info by the aggregate name\r\n        await axios.get(`Aggregate/Aggre/${this.props.Aggre}`)\r\n        .then((res)=>{\r\n            console.log(res.data.res)\r\n            if(res.data.res[0]){\r\n                TotalAmount=res.data.res[0].total; \r\n                UsedAmount=res.data.res[0].used;\r\n                ChartTitle=res.data.res[0].Name;\r\n                leftToAllocate=res.data.res[0].leftToAllocate;\r\n            }\r\n         });\r\n        //get all the svms by the aggreagate name\r\n    await axios.get(`SvmRoute/SvmByAggreName/${this.props.Aggre}`)\r\n        .then((res)=>{\r\n            console.log(res.data.res)\r\n            SVMSArray=res.data.res\r\n        });\r\n        //calculate used vs free presentage\r\n        if(UsedAmount===0){\r\n            SvmsAmount.push(100);\r\n        }else{\r\n            SvmsAmount.push(leftToAllocate);\r\n        }\r\n        SvmsName.push('Free')\r\n        SVMSArray.forEach((SVM)=>{\r\n            console.log(SVM)\r\n            if(SVM.Amount!==0)\r\n            {   console.log( SVM.total+'||'+TotalAmount)\r\n                SvmsAmount.push((parseInt(( SVM.total/TotalAmount)*10000))/100)\r\n                SvmsName.push(SVM.Name)\r\n            }\r\n            console.log(SvmsAmount)\r\n            }) \r\n                Chartdata.push({\r\n                    chartData:{\r\n                        labels:SvmsName,\r\n                        datasets:[{\r\n                        label:\"Requests\",\r\n                        backgroundColor:[\"rgba(245, 73, 120, 0.65)\",\r\n                                       \"rgba(175, 146, 234, 0.65)\",\r\n                                       \"rgba(152, 244, 244, 0.56)\",\r\n                                       \"rgba(152, 244, 152, 0.56)\",\r\n                                       \"rgba(244, 152, 152, 0.56)\",\r\n                                       \"rgba(244, 244, 152, 0.56)\",\r\n                                       \"rgba(244, 152, 244, 0.56)\",\r\n                                       \"rgba(152, 198, 244, 0.56)\",\r\n                                          ],\r\n                        data:SvmsAmount\r\n                        },\r\n                        ]\r\n                    }\r\n                })\r\n            console.log(Chartdata)\r\n            let message='';\r\n            //create a masage by calculateing the used presentage\r\n            console.log(this.props.Amount)\r\n            console.log(UsedAmount)\r\n            console.log(TotalAmount)\r\n            let presentage=parseInt(((this.props.Amount+UsedAmount)/TotalAmount)*100);\r\n            if(TotalAmount===null||UsedAmount===null||this.props.Amount===null)\r\n            {\r\n                message=\"Server Errore cant get the data Please try again later\"\r\n            }\r\n            if(presentage<100)\r\n            {\r\n                message=`All Clear ${(presentage-100)*-1}% Free left after`\r\n            }\r\n            if(presentage>=100&&presentage<140)\r\n            {\r\n                message=`OVER SUBSCRIBE if you accept ${presentage}% Black line %`\r\n            }\r\n            if(presentage>140)\r\n            {\r\n                message=`Over SUBSCRIBE ${presentage}% Red line cant allocate this user Storage request`\r\n            }\r\n            this.props.getMessage({message,presentage});\r\n            \r\n            this.setState({Chartdata:Chartdata,ChartTitle:ChartTitle})\r\n    }   \r\n}\r\n Charts(){\r\n    if(this.state.Chartdata)\r\n    {\r\n        console.log(this.state.Chartdata[0].chartData)\r\n    return( \r\n        this.state.Chartdata.map((Chartdata,index)=>{\r\n            return(\r\n                    <div className=\"col-md-6\" key={index}>\r\n                        {this.state.Chartdata[index]?\r\n                             <Chart type='Pie' title={this.state.ChartTitle} chartData={this.state.Chartdata[index]}/>\r\n                        :<alert className=\"alert alert-warning\">Server Error Please try again later</alert>}\r\n                    </div>\r\n                )\r\n        })\r\n    )}\r\n    else{\r\n        return(\r\n        <div className=\"d-flex justify-content-center\">\r\n            <div className=\"spinner-border\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n            </div>\r\n        </div>\r\n    )}\r\n }\r\n\r\n    render(){\r\n        \r\n        return(\r\n            <Fragment>\r\n                {this.Charts()}\r\n            </Fragment>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}
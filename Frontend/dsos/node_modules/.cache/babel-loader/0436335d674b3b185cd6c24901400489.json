{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0; // This function takes an array of styles and separates them into styles that\n// are handled by Aphrodite and inline styles.\n\nfunction separateStyles(stylesArray) {\n  var classNames = []; // Since determining if an Object is empty requires collecting all of its\n  // keys, and we want the best performance in this code because we are in the\n  // render path, we are going to do a little bookkeeping ourselves.\n\n  var hasInlineStyles = false;\n  var inlineStyles = {}; // This is run on potentially every node in the tree when rendering, where\n  // performance is critical. Normally we would prefer using `forEach`, but\n  // old-fashioned for loops are faster so that's what we have chosen here.\n\n  for (var i = 0; i < stylesArray.length; i++) {\n    // eslint-disable-line no-plusplus\n    var style = stylesArray[i]; // If this  style is falsy, we just want to disregard it. This allows for\n    // syntax like:\n    //\n    //   css(isFoo && styles.foo)\n\n    if (style) {\n      if (typeof style === 'string') {\n        classNames.push(style);\n      } else {\n        Object.assign(inlineStyles, style);\n        hasInlineStyles = true;\n      }\n    }\n  }\n\n  return {\n    classNames: classNames,\n    hasInlineStyles: hasInlineStyles,\n    inlineStyles: inlineStyles\n  };\n}\n\nvar _default = separateStyles;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["C:/Users/ben78/Desktop/ספר פרוקייט/DSOS/Frontend/dsos/node_modules/react-with-styles-interface-css/dist/utils/separateStyles.js"],"names":["Object","defineProperty","exports","value","separateStyles","stylesArray","classNames","hasInlineStyles","inlineStyles","i","length","style","push","assign","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B,C,CAEA;AACA;;AACA,SAASE,cAAT,CAAwBC,WAAxB,EAAqC;AACnC,MAAIC,UAAU,GAAG,EAAjB,CADmC,CACd;AACrB;AACA;;AAEA,MAAIC,eAAe,GAAG,KAAtB;AACA,MAAIC,YAAY,GAAG,EAAnB,CANmC,CAMZ;AACvB;AACA;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,WAAW,CAACK,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C;AACA,QAAIE,KAAK,GAAGN,WAAW,CAACI,CAAD,CAAvB,CAF2C,CAEf;AAC5B;AACA;AACA;;AAEA,QAAIE,KAAJ,EAAW;AACT,UAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7BL,QAAAA,UAAU,CAACM,IAAX,CAAgBD,KAAhB;AACD,OAFD,MAEO;AACLX,QAAAA,MAAM,CAACa,MAAP,CAAcL,YAAd,EAA4BG,KAA5B;AACAJ,QAAAA,eAAe,GAAG,IAAlB;AACD;AACF;AACF;;AAED,SAAO;AACLD,IAAAA,UAAU,EAAEA,UADP;AAELC,IAAAA,eAAe,EAAEA,eAFZ;AAGLC,IAAAA,YAAY,EAAEA;AAHT,GAAP;AAKD;;AAED,IAAIM,QAAQ,GAAGV,cAAf;AACAF,OAAO,CAAC,SAAD,CAAP,GAAqBY,QAArB","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports[\"default\"] = void 0;\r\n\r\n// This function takes an array of styles and separates them into styles that\r\n// are handled by Aphrodite and inline styles.\r\nfunction separateStyles(stylesArray) {\r\n  var classNames = []; // Since determining if an Object is empty requires collecting all of its\r\n  // keys, and we want the best performance in this code because we are in the\r\n  // render path, we are going to do a little bookkeeping ourselves.\r\n\r\n  var hasInlineStyles = false;\r\n  var inlineStyles = {}; // This is run on potentially every node in the tree when rendering, where\r\n  // performance is critical. Normally we would prefer using `forEach`, but\r\n  // old-fashioned for loops are faster so that's what we have chosen here.\r\n\r\n  for (var i = 0; i < stylesArray.length; i++) {\r\n    // eslint-disable-line no-plusplus\r\n    var style = stylesArray[i]; // If this  style is falsy, we just want to disregard it. This allows for\r\n    // syntax like:\r\n    //\r\n    //   css(isFoo && styles.foo)\r\n\r\n    if (style) {\r\n      if (typeof style === 'string') {\r\n        classNames.push(style);\r\n      } else {\r\n        Object.assign(inlineStyles, style);\r\n        hasInlineStyles = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    classNames: classNames,\r\n    hasInlineStyles: hasInlineStyles,\r\n    inlineStyles: inlineStyles\r\n  };\r\n}\r\n\r\nvar _default = separateStyles;\r\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}
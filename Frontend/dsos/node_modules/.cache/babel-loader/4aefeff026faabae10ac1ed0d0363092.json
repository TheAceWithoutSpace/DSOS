{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ben78\\\\Desktop\\\\DSOS\\\\Frontend\\\\dsos\\\\src\\\\components\\\\SystemGrafth.component.js\";\nimport React, { Component, Fragment } from 'react';\nimport axios from 'axios';\nimport Chart from './chart.component';\nexport default class SystemGrafth extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chartData: {\n        n: 0\n      },\n      Requests: [],\n      SVM: '',\n      Chartdata: '',\n      TotalAmmount: '',\n      message: '',\n      ChartTitle: 'loading'\n    };\n  }\n\n  async componentDidMount(nextProps) {\n    if (this.props !== nextProps) {\n      let TotalAmount = 0;\n      let UsedAmount = 0;\n      let Chartdata = [];\n      let SVMSArray = [];\n      let SvmsName = [];\n      let SvmsAmount = [];\n      let ChartTitle = '';\n      await axios.get(`http://localhost:3000/AGGREGATE/Aggre/${this.props.Aggre}`).then(res => {\n        TotalAmount = res.data.Req[0].TotalAmount;\n        UsedAmount = res.data.Req[0].Amount;\n        ChartTitle = res.data.Req[0].name;\n      });\n      await axios.get(`http://localhost:3000/SvmRoute/SvmByAggreName/${this.props.Aggre}`).then(res => SVMSArray = res.data.Req);\n      SvmsAmount.push(UsedAmount / TotalAmount * 100);\n      SvmsName.push('Free');\n      SVMSArray.forEach(SVM => {\n        if (SVM.Amount !== 0) {\n          SvmsAmount.push(SVM.Amount / TotalAmount * 100);\n          SvmsName.push(SVM.name);\n        }\n      });\n      Chartdata.push({\n        chartData: {\n          labels: SvmsName,\n          datasets: [{\n            label: \"Requests\",\n            backgroundColor: [\"rgba(245, 73, 120, 0.65)\", \"rgba(175, 146, 234, 0.65)\", \"rgba(152, 244, 244, 0.56)\", \"rgba(152, 244, 152, 0.56)\", \"rgba(244, 152, 152, 0.56)\", \"rgba(244, 244, 152, 0.56)\", \"rgba(244, 152, 244, 0.56)\", \"rgba(152, 198, 244, 0.56)\"],\n            data: SvmsAmount\n          }]\n        }\n      });\n      let message = '';\n      let presentage = parseInt((this.props.Amount + UsedAmount) / TotalAmount * 100);\n\n      if (TotalAmount === null || UsedAmount === null || this.props.Amount === null) {\n        message = \"Server Errore cant get the data Please try again later\";\n      }\n\n      if (presentage < 100) {\n        message = `All Clear ${(presentage - 100) * -1}% Free left after`;\n      }\n\n      if (presentage >= 100 && presentage < 140) {\n        message = `OVER SUBSCRIBE if you accept ${presentage}% Black line %`;\n      }\n\n      if (presentage > 140) {\n        message = `Over SUBSCRIBE ${presentage}% Red line cant allocate this user Storage request`;\n      }\n\n      this.props.getMessage({\n        message,\n        presentage\n      });\n      this.setState({\n        Chartdata: Chartdata,\n        ChartTitle: ChartTitle\n      });\n    }\n  }\n\n  Charts() {\n    if (this.state.Chartdata) {\n      return this.state.Chartdata.map((Chartdata, index) => {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"col-md-6\",\n          key: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 21\n          }\n        }, this.state.Chartdata[index] ? /*#__PURE__*/React.createElement(Chart, {\n          type: \"Pie\",\n          title: this.state.ChartTitle,\n          chartData: this.state.Chartdata[index],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 30\n          }\n        }) : /*#__PURE__*/React.createElement(\"alert\", {\n          className: \"alert alert-warning\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 26\n          }\n        }, \"Server Error Please try again later\"));\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"d-flex justify-content-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"spinner-border\",\n        role: \"status\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"sr-only\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }\n      }, \"Loading...\")));\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }\n    }, this.Charts());\n  }\n\n}","map":{"version":3,"sources":["C:/Users/ben78/Desktop/DSOS/Frontend/dsos/src/components/SystemGrafth.component.js"],"names":["React","Component","Fragment","axios","Chart","SystemGrafth","constructor","props","state","chartData","n","Requests","SVM","Chartdata","TotalAmmount","message","ChartTitle","componentDidMount","nextProps","TotalAmount","UsedAmount","SVMSArray","SvmsName","SvmsAmount","get","Aggre","then","res","data","Req","Amount","name","push","forEach","labels","datasets","label","backgroundColor","presentage","parseInt","getMessage","setState","Charts","map","index","render"],"mappings":"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","sourcesContent":["import React,{Component, Fragment}from 'react';\r\nimport axios from 'axios';\r\nimport Chart from './chart.component';\r\n\r\nexport default class SystemGrafth extends Component{\r\n   constructor(props){\r\n       super(props);\r\n       this.state={\r\n        chartData:{n:0},\r\n        Requests:[],\r\n        SVM:'',\r\n        Chartdata:'',\r\n        TotalAmmount:'',\r\n        message:'',\r\n        ChartTitle:'loading',\r\n       }\r\n}\r\n\r\nasync componentDidMount(nextProps)\r\n{\r\n    if(this.props!==nextProps){\r\n    let TotalAmount=0;\r\n    let UsedAmount=0;\r\n    let Chartdata=[];\r\n    let SVMSArray=[];\r\n    let SvmsName=[];\r\n    let SvmsAmount=[];\r\n    let ChartTitle='';\r\n     await axios.get(`http://localhost:3000/AGGREGATE/Aggre/${this.props.Aggre}`)\r\n           .then((res)=>{\r\n               TotalAmount=res.data.Req[0].TotalAmount; \r\n               UsedAmount=res.data.Req[0].Amount;\r\n               ChartTitle=res.data.Req[0].name;\r\n            });\r\n     await axios.get(`http://localhost:3000/SvmRoute/SvmByAggreName/${this.props.Aggre}`)\r\n        .then((res)=>SVMSArray=res.data.Req);\r\n        SvmsAmount.push(((UsedAmount/TotalAmount)*100));\r\n        SvmsName.push('Free')\r\n        SVMSArray.forEach((SVM)=>{\r\n            if(SVM.Amount!==0)\r\n            {   \r\n                SvmsAmount.push((((SVM.Amount/TotalAmount)*100)))\r\n                SvmsName.push(SVM.name)\r\n            }\r\n            }) \r\n                Chartdata.push({\r\n                    chartData:{\r\n                        labels:SvmsName,\r\n                        datasets:[{\r\n                        label:\"Requests\",\r\n                        backgroundColor:[\"rgba(245, 73, 120, 0.65)\",\r\n                                       \"rgba(175, 146, 234, 0.65)\",\r\n                                       \"rgba(152, 244, 244, 0.56)\",\r\n                                       \"rgba(152, 244, 152, 0.56)\",\r\n                                       \"rgba(244, 152, 152, 0.56)\",\r\n                                       \"rgba(244, 244, 152, 0.56)\",\r\n                                       \"rgba(244, 152, 244, 0.56)\",\r\n                                       \"rgba(152, 198, 244, 0.56)\",\r\n                                          ],\r\n                        data:SvmsAmount\r\n                        },\r\n                        ]\r\n                    }\r\n                })\r\n            \r\n            let message='';\r\n            let presentage=parseInt(((this.props.Amount+UsedAmount)/TotalAmount)*100);\r\n            if(TotalAmount===null||UsedAmount===null||this.props.Amount===null)\r\n            {\r\n                message=\"Server Errore cant get the data Please try again later\"\r\n            }\r\n            if(presentage<100)\r\n            {\r\n                message=`All Clear ${(presentage-100)*-1}% Free left after`\r\n            }\r\n            if(presentage>=100&&presentage<140)\r\n            {\r\n                message=`OVER SUBSCRIBE if you accept ${presentage}% Black line %`\r\n            }\r\n            if(presentage>140)\r\n            {\r\n                message=`Over SUBSCRIBE ${presentage}% Red line cant allocate this user Storage request`\r\n            }\r\n            this.props.getMessage({message,presentage});\r\n            this.setState({Chartdata:Chartdata,ChartTitle:ChartTitle})\r\n    }   \r\n}\r\n Charts(){\r\n    if(this.state.Chartdata)\r\n    {\r\n    return(\r\n        this.state.Chartdata.map((Chartdata,index)=>{\r\n            return(\r\n                    <div className=\"col-md-6\" key={index}>\r\n                        {this.state.Chartdata[index]?\r\n                             <Chart type='Pie' title={this.state.ChartTitle} chartData={this.state.Chartdata[index]}/>\r\n                        :<alert className=\"alert alert-warning\">Server Error Please try again later</alert>}\r\n                    </div>\r\n                )\r\n        })\r\n    )}\r\n    else{\r\n        return(\r\n        <div className=\"d-flex justify-content-center\">\r\n            <div className=\"spinner-border\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n            </div>\r\n        </div>\r\n    )}\r\n }\r\n\r\n    render(){\r\n        \r\n        return(\r\n            <Fragment>\r\n                {this.Charts()}\r\n            </Fragment>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}